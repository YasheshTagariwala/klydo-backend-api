
	let temp = await Post		
				.withSelect('userProfile',['first_name as name','last_name as lname'], (q) =>{
					q.withSelect('userExtra',['profile_image as dp']);
				})		
				.where({'profile_id':req.params.id,'post_published' : false})
				.select(['emotion as emotion','profile_id as uid','id as pid','post_content as content','post_hashes as hash','created_at as written_date'])
				.orderBy('id','desc').buildQuery();
	let temp2 = temp.query;
		console.log(temp2.toString());




		console.log(_.map(singlePost.toJSON() , (o) => { return _.pick(o ,'uid')}));





Activity        
        .with(['posts','feelpals','comments','reactions','slamReply'])
        .where((q) => {
            q.whereHas('posts')
            q.orWhereHas('comments')        
            q.orWhereHas('feelpals')        
            q.orWhereHas('reactions')
            q.orWhereHas('slamReply')   
        })                                                         
        .get());

		select "activity".* from "activity" where 
((exists (select * from "new_posts" where "activity_id" in ("activity"."id") and "new_posts"."deleted_at" is null)) 
 or (exists (select * from "post_comment" where "activity_id" in ("activity"."id") and "post_comment"."deleted_at" is null)) 
 or (exists (select * from "feelpals" where "activity_id" in ("activity"."id") and "feelpals"."deleted_at" is null)) 
 or (exists (select * from "post_reaction" where "activity_id" in ("activity"."id") and "post_reaction"."deleted_at" is null)) 
 or (exists (select * from "slambook_reply" where "activity_id" in ("activity"."id") 
and "slambook_reply"."deleted_at" is null))) 
and "activity"."deleted_at" is null